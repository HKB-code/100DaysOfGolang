📦 Go Generics vs Interfaces

🔹 Generics (type Stack[T any])
- T is a type parameter that can be any type.
- any is an alias for interface{}, used as a default constraint.
- When you create Stack[int], items []T becomes []int—no boxing or interface overhead.

🔹 Interfaces
- Define a method set that a type must implement.
- Used for behavior abstraction, not data structures.
- If T has a constraint like Printable, it must implement a method like String().

🧠 Keyword Breakdown
➤ any
- Alias for interface{} introduced in Go 1.18.
- Default constraint for generic type parameters.
- Allows any type, but not enforced behavior like interfaces.

➤ Type Alias vs Type Definition
type MyInt = int      // Alias: same as int
type MyIntDefined int // New type: not interchangeable with int


🤓 VS Code Tooltip Quirk
- VS Code might show T as an interface when hovering over generic items.
- Reason: any = interface{}, and gopls (Go language server) leans on that equivalence.
- Even if it looks like interface{}, your generics are fully type-safe and not boxed.



🔷 Interface vs Generics
#Generics:
1.Purpose = Type-safe reuse for data types
2.runtime impact = No boxing, compile-time safety
3.Flexibility = Concrete types via constraints
4.Syntax = type Satck[T any]

#Interface:
1.Purpose = Method-set based behavior
2.runtime impact = Dynamic dispatch, type assertion
3.Flexibility = Accept anything implementing methods
4.Syntax = type Printable interface{String() string}




🔧 You can also use custom interfaces as constraints

type Printable interface {
	String() string
}

func PrintAll[T Printable](items []T) {
	for _, item := range items {
		fmt.Println(item.String())
	}
}
You’re telling Go: “Only let me use types that implement String().”



🧱 Concrete Types
“Concrete” just means specific and fully defined types—like int, string, User, []byte, etc.
intStack := Stack[int]{}
Here, int is the concrete type filling in the generic parameter T.
# Contrast with Interfaces:
An interface lets you operate on abstract behavior, while a concrete type is fixed and complete.


🚀 Real World Analogy
Think of generics like building a phone case that fits any phone model, but only ones with standard dimensions (constraint). A concrete phone is when you say, “This case is for the iPhone 14.”
